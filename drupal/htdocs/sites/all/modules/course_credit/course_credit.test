<?php

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'course') . '/tests/CourseTestCase.test';

/**
 * Tests for conditional event-based access to course objects.
 */
class CourseCreditTestCase extends CourseTestCase {

  public static function getInfo() {
    // Note that getInfo() strings are not translated with t().
    return array(
      'name' => 'Course credit',
      'description' => 'Ensure that Course credit functions properly.',
      'group' => 'Course',
    );
  }

  function getModules() {
    $modules = parent::getModules();
    $modules[] = 'course_credit';
    $modules[] = 'course_credit_test';
    return $modules;
  }

  function setUp() {
    parent::setUp();
    course_credit_test_create_types();
  }

  /**
   * Test the mapping UI.
   */
  function testCourseCreditProfileMappingInterface() {
    // Hack before Course fixes the issue with the menu cache.
    menu_cache_clear_all();
    course_credit_test_create_user_field();
    course_credit_test_create_profile2_field();
    $account = $this->drupalCreateUser(array('administer course', 'administer course credit'));
    $this->drupalLogin($account);
    $this->drupalGet('admin/config/course/credit/course_credit_types');
    $this->assertText('A non-variable credit type.', 'Saw non-variable credit type.');
    $this->assertText('A variable credit type.', 'Saw variable credit type.');
    $this->drupalGet('admin/config/course/credit/types/variable/map');
    $this->drupalPost(NULL, array(
      'map[user_profile][user_type_profile1][]' => array('yellow'),
      'map[user_profile][user_type_profile2][]' => array('blue'),
      ), t('Set mapping'));
    $this->drupalGet('admin/config/course/credit/types/variable/map');
    $this->assertOptionSelected('edit-map-user-profile-user-type-profile1', 'yellow');
    $this->assertOptionSelected('edit-map-user-profile-user-type-profile2', 'blue');
  }

  /**
   * Test credit type to user field mapping.
   */
  function testCourseCreditUserMapping() {
    course_credit_test_create_user_field();
    variable_set('course_credit_type_map_variable', array(
      'user_profile' => array(
        'user_type_profile1' => array(
          'yellow' => 'yellow',
        ),
      ),
    ));

    // Create a course with the both credit types active.
    $courseNode = $this->createCourseNode();
    $courseNode->course_credit['variable'] = array(
      'increments' => 0.25,
      'min' => 1,
      'max' => 5,
      'enable_variable_credit' => 1,
      'active' => 1,
    );
    $courseNode->course_credit['nonvariable'] = array(
      'increments' => 0,
      'min' => 0,
      'max' => 5,
      'enable_variable_credit' => 0,
      'active' => 1,
    );
    node_save($courseNode);

    // Create a profile that should match variable credit.
    $account = $this->drupalCreateUser();
    $obj = entity_metadata_wrapper('user', $account);
    $obj->user_type_profile1 = 'yellow';
    $obj->save();

    // Check eligibility.
    $eligible = course_credit_user_credit_types($courseNode, $account);
    $this->assertEqual(count($eligible), 1, 'User only eligible for one active credit type.');
    $this->assertEqual(key($eligible), 'variable', 'User eligible for variable credit.');
  }

  /**
   * Test credit type to Profile2 field mapping.
   */
  function testCourseCreditProfile2Mapping() {
    course_credit_test_create_profile2_field();
    variable_set('course_credit_type_map_variable', array(
      'user_profile' => array(
        'user_type_profile2' => array(
          'blue' => 'blue',
        ),
      ),
    ));

    // Create a course with the both credit types active.
    $courseNode = $this->createCourseNode();
    $courseNode->course_credit['variable'] = array(
      'increments' => 0.25,
      'min' => 1,
      'max' => 5,
      'enable_variable_credit' => 1,
      'active' => 1,
    );
    $courseNode->course_credit['nonvariable'] = array(
      'increments' => 0,
      'min' => 0,
      'max' => 5,
      'enable_variable_credit' => 0,
      'active' => 1,
    );
    node_save($courseNode);

    // Create a profile that should match variable credit.
    $account = $this->drupalCreateUser();
    $main_profile = entity_create('profile2', array('type' => 'main'));
    $main_profile->uid = $account->uid;
    $main_profile->user_type_profile2[LANGUAGE_NONE][0]['value'] = 'blue';
    $main_profile->save();

    // Check eligibility.
    $eligible = course_credit_user_credit_types($courseNode, $account);
    $this->assertEqual(count($eligible), 1, 'User only eligible for one active credit type.');
    $this->assertEqual(key($eligible), 'variable', 'User eligible for variable credit.');
  }

  /**
   * Test claim functionality (min, max, increments).
   */
  function testCourseCreditClaiming() {
    // Set open claim. We just want to test the claim functionality.
    variable_set('course_credit_open_claim', 1);
    $courseNode = $this->createCourseNode();
    // Create instances.
    $courseNode->course_credit['variable'] = array(
      'increments' => 0.25,
      'min' => 1,
      'max' => 5,
      'enable_variable_credit' => 1,
      'active' => 1,
    );
    $courseNode->course_credit['nonvariable'] = array(
      'increments' => 0,
      'min' => 0,
      'max' => 5,
      'enable_variable_credit' => 0,
      'active' => 1,
    );
    node_save($courseNode);
    $account = $this->drupalCreateUser();
    $this->drupalLogin($account);
    course_get_course($courseNode, $account)->getTracker()->setOption('complete', 1)->save();
    $this->drupalGet("node/$courseNode->nid/course-credit-app");
    $this->assertText("You can claim 5.00 Non-variable credits.");
    $this->assertText("Variable credit can be claimed in 0.25 increments up to a maximum of 5.00.");

    // Variable - increments
    $this->drupalPost(NULL, array(
      'credits_claimed[variable]' => 1.26,
      ), t('Claim credits'));
    $this->assertText('Credits claimed must be in increments of 0.25');

    // Variable - max
    $this->drupalPost(NULL, array(
      'credits_claimed[variable]' => 44,
      ), t('Claim credits'));
    $this->assertText('Credits claimed exceed maximum of 5.00.');

    // Variable - min
    $this->drupalPost(NULL, array(
      'credits_claimed[variable]' => 0.5,
      ), t('Claim credits'));
    $this->assertText('Credits claimed below minimum of 1.00.');

    // Variable - agree
    $this->drupalPost(NULL, array(
      ), t('Claim credits'));
    $this->assertText('I agree that I am only claiming credit commensurate with the extent of my participation in the activity. field is required.');

    // Credit award
    $this->drupalPost(NULL, array(
      'credits_claimed[variable]' => 2.5,
      'agreement' => 1,
      ), t('Claim credits'));
    $this->assertText('Awarded credit.');
    $awarded = course_credit_get_credit_awarded($courseNode->nid, $account->uid);
    $this->assertEqual(count($awarded), '2', 'User was awarded 2 credit types.');
    $this->assertEqual($awarded['variable']->credits, '2.5', 'Variable credit amount is correct.');
    $this->assertEqual($awarded['nonvariable']->credits, '5', 'Non-variable credit amount is correct.');
  }

  /**
   * Test expiration functionality.
   */
  function testCourseCreditExpiration() {
    // Set open claim. We just want to test the expiration functionality.
    variable_set('course_credit_open_claim', 1);
    // Skip claim screen for nonvariable credit.
    variable_set('course_credit_skip_no_claim', 1);

    $account = $this->drupalCreateUser();
    $this->drupalLogin($account);

    // Date
    $courseNode = $this->createCourseNode();
    $faketime = REQUEST_TIME + rand(86400, 300000);
    $credit_type_instance = array(
      'nid' => $courseNode->nid,
      'type' => 'nonvariable',
      'increments' => 0,
      'min' => 0,
      'max' => 5,
      'enable_variable_credit' => 0,
      'active' => 1,
      'expiration_type' => 'date',
      'expiration_date' => $faketime,
    );
    course_credit_save_course_credit_type_instance($credit_type_instance);
    course_get_course($courseNode, $account)->getTracker()->setOption('complete', 1)->save();
    $this->drupalGet("node/$courseNode->nid/course-credit-app");
    $awarded = course_credit_get_credit_awarded($courseNode->nid, $account->uid);
    $this->assertEqual($awarded['nonvariable']->expiration, $faketime, 'Expiration date is correct.');

    // Date
    $courseNode = $this->createCourseNode();
    $credit_type_instance = array(
      'nid' => $courseNode->nid,
      'type' => 'nonvariable',
      'increments' => 0,
      'min' => 0,
      'max' => 5,
      'enable_variable_credit' => 0,
      'active' => 1,
      'expiration_type' => 'calendar_year',
      'expiration_offset' => 86400 * 2,
    );
    $expiration_calyear_shouldbe = mktime(0, 0, 0, 1, 1, date('Y') + 1) - 1 + 86400 * 2;
    course_credit_save_course_credit_type_instance($credit_type_instance);
    course_get_course($courseNode, $account)->getTracker()->setOption('complete', 1)->save();
    $this->drupalGet("node/$courseNode->nid/course-credit-app");
    $awarded = course_credit_get_credit_awarded($courseNode->nid, $account->uid);
    $this->assertEqual($awarded['nonvariable']->expiration, $expiration_calyear_shouldbe, 'Calendar year expiration date is correct.');

    // Credit awarded
    $courseNode = $this->createCourseNode();
    $credit_type_instance = array(
      'nid' => $courseNode->nid,
      'type' => 'nonvariable',
      'increments' => 0,
      'min' => 0,
      'max' => 5,
      'enable_variable_credit' => 0,
      'active' => 1,
      'expiration_type' => 'credit_awarded',
      'expiration_offset' => 86400 * 2,
    );
    course_credit_save_course_credit_type_instance($credit_type_instance);
    course_get_course($courseNode, $account)->getTracker()->setOption('complete', 1)->save();
    $this->drupalGet("node/$courseNode->nid/course-credit-app");
    $awarded = course_credit_get_credit_awarded($courseNode->nid, $account->uid);
    $this->assertEqual($awarded['nonvariable']->expiration, $awarded['nonvariable']->date + 86400 * 2, 'Credit awarded year expiration date is correct.');
  }

}
